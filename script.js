'use strict';

const arr = ['Alex', 'Ann', 'Oleg', 'Alex']; // Исходный массив с повторяющимися значениями. 'Alex' повторяется дважды

function unique(arr) {
    // Создаем Set из массива arr, который автоматически удаляет все дубли
    return Array.from(new Set(arr)); // Возвращаем новый массив с уникальными значениями
}

console.log(unique(arr)); // Выводим результат работы функции unique, массив без дублирующихся значений


// const set = new Set(arr);  
// Создаем Set из массива arr. Set автоматически удаляет дубликаты элементов.
// Например, из массива ['Alex', 'Ann', 'Oleg', 'Alex'] получится Set с уникальными значениями.

// set.add('Ivan')            
// Добавляем 'Ivan' в Set. Set не добавит элемент, если он уже существует в коллекции.
// .add('Oleg');            
// Добавляем 'Oleg' в Set, но так как он уже есть в Set, ничего не изменится.

// console.log(set);          
// Выводим Set в консоль. Set содержит только уникальные значения. Например, Set(4) { 'Alex', 'Ann', 'Oleg', 'Ivan' }.



// set.delete(value);        
// Удаляет элемент из Set. Например, set.delete('Ivan'); удалит 'Ivan' из Set.
// После этого Set станет { 'Alex', 'Ann', 'Oleg' }.

// set.has(value);           
// Проверяет, есть ли элемент в Set. Например, set.has('Alex') вернет true, а set.has('Ivan') вернет false,
// если 'Ivan' был удален.

// set.clear();              
// Очищает все элементы в Set. После вызова этой функции Set станет пустым.

// set.size;                 
// Возвращает количество элементов в Set. Например, set.size после добавления 'Ivan' будет 4, если в Set 4 элемента.



// for (let value of set) console.log(value);  
// Используем цикл for...of для перебора всех элементов в Set.
// Выведет по очереди все элементы в Set: 'Alex', 'Ann', 'Oleg', 'Ivan'.

// set.forEach((value, valueAgain, set) => { 
// Используем метод forEach для перебора элементов Set.
// Аргументы:
// - value: значение элемента,
// - valueAgain: это будет то же самое, что и value (повторение),
// - set: сам Set (это может быть полезно в сложных операциях).

//     console.log(value, valueAgain);
//     // Выводит по два значения подряд. Например, 'Alex' 'Alex', 'Ann' 'Ann', 'Oleg' 'Oleg', 'Ivan' 'Ivan'.

// });



// console.log(set.values());
// Возвращает итератор, который позволяет пройтись по значениям Set.
// Это полезно, если вы хотите пройтись по Set, например, с помощью цикла.

// console.log(set.keys());
// Возвращает итератор, который возвращает ключи в Set. В случае с Set ключи всегда равны значениям, так что это будет то же самое, что и set.values().

// console.log(set.entries());
// Возвращает итератор с парами [ключ, значение]. В случае с Set, пары всегда будут одинаковыми, потому что ключи равны значениям.

